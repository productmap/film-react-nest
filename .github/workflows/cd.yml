name: CD Pipeline

on:
  workflow_run:
    workflows: [ "CI Pipeline" ]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' && github.event.workflow_run.head_branch == 'review-2'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Install Yandex Cloud CLI
        uses: okar1/yc-cli-install@master
        with:
          SA_KEY: ${{ secrets.YC_SA_KEY_JSON }}

      - name: Configure Yandex Cloud Profile
        run: |
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
          yc config set compute-default-zone ${{ secrets.YC_ZONE_ID }}
          yc version

      - name: Get VM external IP
        id: vm
        run: |
          VM_NAME="film-nest-vm"
          EXTERNAL_IP=$(yc compute instance get "$VM_NAME" --format json | jq -r '.network_interfaces[0].primary_v4_address.one_to_one_nat.address')
          if [ -z "$EXTERNAL_IP" ]; then
            echo "::error::VM not found or has no external IP. Please run the 'Provision Infrastructure' workflow first."
            exit 1
          fi
          echo "external_ip=$EXTERNAL_IP" >> "$GITHUB_OUTPUT"

      - name: Create .env file
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DATABASE_DRIVER=postgres" >> .env

      - name: Copy project files to VM
        uses: appleboy/scp-action@v1
        with:
          host: ${{ steps.vm.outputs.external_ip }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yandex.yml,postgres/,nginx/"
          target: "/home/ubuntu/film-nest-prod"

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.vm.outputs.external_ip }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.SSH_USERNAME }}/film-nest-prod
            
            echo "Logging in to Yandex Container Registry..."
            echo '${{ secrets.YC_SA_KEY_JSON }}' | docker login --username json_key --password-stdin cr.yandex
            
            echo "Starting services with new images..."
            IMAGE_TAG=${{ github.sha }} docker compose -f docker-compose.yandex.yml up -d --remove-orphans
            
            echo "Cleaning up old Docker images..."
            docker image prune -a -f --filter "until=24h"
