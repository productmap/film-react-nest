name: CD Pipeline

on:
  workflow_run:
    workflows: [ "CI Pipeline" ]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Запускаем деплой только если CI прошел успешно
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'review-2')
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Переходим в директорию с проектом на сервере
            cd ~/film-react-nest
            
            # Экспортируем переменные окружения для docker-compose
            # Тэг образа хэш мы использовали как тег для Docker-образа в CI
            export IMAGE_TAG=${{ github.event.workflow_run.head_sha }}
            
            # ID реестра, чтобы docker-compose мог составить полный путь к образу
            export YC_REGISTRY_ID=${{ secrets.YC_REGISTRY_ID }}
            
            # Логинимся в Yandex Container Registry на сервере
            echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' | docker login --username json_key --password-stdin cr.yandex
            
            # Загружаем актуальные образы
            docker-compose -f docker-compose.yandex.yml --env-file ./.env pull
            
            # Перезапускаем сервисы с новыми образами
            docker-compose -f docker-compose.yandex.yml --env-file ./.env up -d --remove-orphans
            
            # Очищаем старые, неиспользуемые образы
            docker image prune -f
