name: CD Pipeline

on:
  workflow_run:
    workflows: [ "CI Pipeline" ]
    types:
      - completed
    branches:
      - review-2

jobs:
  deploy:
    runs-on: ubuntu-latest
#    if: >
#      (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'review-2') &&
#      github.event.workflow_run.conclusion == 'success'
    # Запускаем деплой только если CI прошел успешно
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set Docker tag
        id: vars
        run: |
          # Используем имя ветки для тега, 'latest' для main
          branch_name=${{ github.event.workflow_run.head_branch }}
          if [ "$branch_name" == "main" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=$(echo ${branch_name} | sed -e 's/[^a-zA-Z0-9]/-/g')" >> $GITHUB_OUTPUT
          fi

      - name: Login to Yandex Container Registry
        uses: yc-actions/yc-cr-login@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_KEY_JSON }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Переходим в директорию с проектом на сервере
            cd ~/film-react-nest
            
            # Экспортируем переменные окружения для docker-compose
            # Тэг образа, соответствующий ветке
            export IMAGE_TAG=${{ steps.vars.outputs.tag }}
            
            # ID реестра, чтобы docker-compose мог составить полный путь к образу
            export YC_REGISTRY_ID=${{ secrets.YC_REGISTRY_ID }}
            
            # Логинимся в Yandex Container Registry на сервере
            echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' | docker login --username json_key --password-stdin cr.yandex
            
            # Загружаем актуальные образы
            docker-compose -f docker-compose.yandex.yml --env-file ./.env pull
            
            # Перезапускаем сервисы с новыми образами
            docker-compose -f docker-compose.yandex.yml --env-file ./.env up -d --remove-orphans
            
            # Очищаем старые, неиспользуемые образы
            docker image prune -f
